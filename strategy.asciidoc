Solving Brainvita
=================

Representing board
-------------------

Bit-map
~~~~~~~

Brainvita's board has 33 holes. For ease we will number them from 0 to 32 as follows

----
          0  1  2
          3  4  5
    6  7  8  9 10 11 12
   13 14 15 16 17 18 19
   20 21 22 23 24 25 26
         27 28 29
         30 31 32
----

The board thus can be represented by a 33-sized bit-map, each bit-position representing the
board as above. A bit is 1 if there is a marble in that hole, or 0 if the hole
is empty. At beginning all holes have marbles except 16.

We will refer the following terms

top rows:: 0-1-2 and 3-4-5
bottom rows:: 27-28-29 and 30-31-32
left columns:: 6-13-20 and 7-14-21
right columns:: 11-18-25 and 12-19-26
center rows:: 6-12, 13-19 and 20-26
center columns:: 0-30, 1-21 and 2-32

Valid-moves
-----------

A possible move is a collection of 3 consecutive squares - either horizontal or
vertical.  A possible move is a valid move when we have 2 adjacent holes having
marbles and the third hole empty. Given any point of the board, to quickly find
all valid moves, we just take a mask of each possible move and see if we can
effect the move.

Eg:

Possible horizontal moves are 0-1-2, 8-9-10 etc..
Possible vertical moves are 6-13-20, 8-15-22 etc..

For a given possible move, there can one of 2 potential valid moves depending on
which hole is empty. For instance, given the possible move 0-1-2, we can either have
hole at 0 or 2 (and marbles at 1,2 or 0,1) to declare a valid move.

All possible moves
^^^^^^^^^^^^^^^^^^

By symmetry there should be same number of horizontal and vertical moves. There are
4 possible horizontal moves with just the top 2 rows and bottom 2 rows. On the centre
rows, we have 6 possible moves each row. Thus total horizontal moves are

* Top : 2
* Bottom: 2
* Center: 2*6 = 12
* *Total: 14*

So, we have 28 possible moves at each point. Depending on holes, each move may be valid
or not.

Masks
~~~~~

To quickly decide on the next move given a board (a bit-map of size-33), we will
pre-create 28 bit-masks and run the board through that.

Strategy
--------

We start with the initial bit-mask and build a tree. Each node in the tree represents
a possible board status, at a given point in time. The root node is the initial 32 bit
1, and 1 zero board-status.

The children at each node, represent every possible next move. Theoretically, we can
have upto 28 children as there are as many possible moves, but not all of them are going
to be possible.

Each level in tree, will have exactly the same number of ones(marbles) by nature of the
game. At any point, we can arrive at the same state that is already arrived by other moves.
So, we always check for duplicates after arriving at a state. If found, we just point to
the first such state. We also point to all duplictes at the first-such-state so that
we can list all possible moves that is possbile.

Algorithmic summary
-------------------

Make next move
~~~~~~~~~~~~~

* Start with a board-state.
* Iterate over all possible masks. For each mask, check if it makes a valid move. If yes,
  just effect the move and arrive at a child-state. We dont have to bother which mask
  generated this child (as our iteration will help us move exactly on the n-masks)
* For a child, check if this child-state is already known. If yes, just link this to the
  duplicate-list of the former.
* If not duplicate, we can recurse again with this child-node, until its impossible to
  make any more moves.

